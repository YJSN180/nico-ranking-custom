name: Update Nico Ranking Data (Adaptive)

on:
  workflow_dispatch:
    inputs:
      group_count:
        description: 'Number of parallel groups (2-8)'
        required: false
        default: '6'
        type: choice
        options:
          - '2'
          - '3'
          - '4'
          - '5'
          - '6'
          - '7'
          - '8'

jobs:
  # Step 0: Fetch NG list once to avoid rate limiting
  fetch-ng-list:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Fetch NG List from KV
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_KV_NAMESPACE_ID: ${{ secrets.CLOUDFLARE_KV_NAMESPACE_ID }}
        CLOUDFLARE_KV_API_TOKEN: ${{ secrets.CLOUDFLARE_KV_API_TOKEN }}
      run: npx tsx scripts/fetch-ng-list.ts
    
    - name: Upload NG List
      uses: actions/upload-artifact@v4
      with:
        name: ng-list
        path: ng-list.json
        retention-days: 1

  # Step 1: Determine group matrix dynamically
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - id: set-matrix
      run: |
        GROUP_COUNT=${{ github.event.inputs.group_count || '6' }}
        MATRIX=$(seq 1 $GROUP_COUNT | jq -R . | jq -s . | jq -c .)
        echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
        echo "Using $GROUP_COUNT groups: $MATRIX"

  # Step 2: Fetch rankings in parallel groups
  fetch-rankings:
    needs: [fetch-ng-list, prepare-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        group: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
      max-parallel: 8
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download NG List
      uses: actions/download-artifact@v4
      with:
        name: ng-list
        path: ./
    
    - name: Fetch rankings for group ${{ matrix.group }}
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_KV_NAMESPACE_ID: ${{ secrets.CLOUDFLARE_KV_NAMESPACE_ID }}
        CLOUDFLARE_KV_API_TOKEN: ${{ secrets.CLOUDFLARE_KV_API_TOKEN }}
      run: |
        echo "Starting group ${{ matrix.group }} at $(date)"
        GROUP_COUNT=${{ github.event.inputs.group_count || '6' }}
        npx tsx scripts/update-ranking-parallel.ts --group ${{ matrix.group }} $GROUP_COUNT
    
    - name: Upload partial results
      uses: actions/upload-artifact@v4
      with:
        name: ranking-data-group-${{ matrix.group }}
        path: ./tmp/ranking-group-${{ matrix.group }}.json
        retention-days: 1
        if-no-files-found: error

  # Step 3: Aggregate results and write to KV
  aggregate-and-write:
    needs: fetch-rankings
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create temp directory
      run: mkdir -p ./tmp
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./tmp
        pattern: ranking-data-group-*
    
    - name: List downloaded files
      run: |
        echo "Downloaded artifacts:"
        ls -la ./tmp/
        find ./tmp -name "*.json" -exec basename {} \; | sort
    
    - name: Move files to correct location
      run: |
        find ./tmp -name "*.json" -exec mv {} ./tmp/ \; 2>/dev/null || true
        echo "Files after moving:"
        ls -la ./tmp/*.json 2>/dev/null || echo "No JSON files found"
    
    - name: Aggregate and write to KV
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_KV_NAMESPACE_ID: ${{ secrets.CLOUDFLARE_KV_NAMESPACE_ID }}
        CLOUDFLARE_KV_API_TOKEN: ${{ secrets.CLOUDFLARE_KV_API_TOKEN }}
      run: |
        echo "Aggregating results and writing to KV..."
        npx tsx scripts/aggregate-ranking-results.ts
    
    - name: Report completion
      if: always()
      run: |
        echo "âœ… Ranking update completed at $(date)"
        echo "Check the logs above for details on processing time and item counts."
        
  # Step 4: Check success rate and report
  check-success:
    needs: aggregate-and-write
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check results
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_KV_NAMESPACE_ID: ${{ secrets.CLOUDFLARE_KV_NAMESPACE_ID }}
        CLOUDFLARE_KV_API_TOKEN: ${{ secrets.CLOUDFLARE_KV_API_TOKEN }}
      run: |
        echo "Checking ranking data completeness..."
        # You can add a script here to check how many genres were successfully updated
        echo "Current group count: ${{ github.event.inputs.group_count || '6' }}"
        echo "If many genres failed, consider reducing the group count."